{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.millify = void 0;\n\nconst options_1 = require(\"./options\");\n\nconst utils_1 = require(\"./utils\"); // Most commonly used digit grouping base.\n\n\nconst DIGIT_GROUPING_BASE = 1000;\n/**\n * Generator that divides a number until a decimal value is found.\n *\n * The denominator is defined by the numerical digit grouping base,\n * or interval. The most commonly-used digit group interval is 1000.\n *\n * e.g. 1,000,000 is grouped in multiples of 1000.\n */\n\nfunction* divider(value) {\n  // Create a mutable copy of the base.\n  let denominator = DIGIT_GROUPING_BASE;\n\n  while (true) {\n    const result = value / denominator;\n\n    if (result < 1) {\n      // End of operation. We can't divide the value any further.\n      return;\n    }\n\n    yield result; // The denominator is increased every iteration by multiplying\n    // the base by itself, until a decimal value remains.\n\n    denominator *= DIGIT_GROUPING_BASE;\n  }\n}\n/**\n * millify converts long numbers to human-readable strings.\n */\n\n\nfunction millify(value, options) {\n  var _a; // Override default options with options supplied by user.\n\n\n  const opts = options ? Object.assign(Object.assign({}, options_1.defaultOptions), options) : options_1.defaultOptions;\n\n  if (!Array.isArray(opts.units) || !opts.units.length) {\n    throw new Error(\"Option `units` must be a non-empty array\");\n  } // Validate value for type and length.\n\n\n  let val = utils_1.parseValue(value); // Add a minus sign (-) prefix if it's a negative number.\n\n  const prefix = val < 0 ? \"-\" : \"\"; // Work only with positive values for simplicity's sake.\n\n  val = Math.abs(val); // Keep dividing the input value by the digit grouping base\n  // until the decimal and the unit index is deciphered.\n\n  let unitIndex = 0;\n\n  for (const result of divider(val)) {\n    val = result;\n    unitIndex += 1;\n  } // Return the original number if the number is too large to have\n  // a corresponding unit. Returning anything else is ambiguous.\n\n\n  const unitIndexOutOfRange = unitIndex >= opts.units.length;\n\n  if (unitIndexOutOfRange) {\n    return value.toString();\n  } // Round decimal up to desired precision.\n\n\n  let rounded = utils_1.roundTo(val, opts.precision); // Fixes an edge case bug that outputs certain numbers as 1000K instead of 1M.\n  // The rounded value needs another iteration in the divider cycle.\n\n  for (const result of divider(rounded)) {\n    rounded = result;\n    unitIndex += 1;\n  } // Calculate the unit suffix and make it lowercase (if needed).\n\n\n  const unit = (_a = opts.units[unitIndex]) !== null && _a !== void 0 ? _a : \"\";\n  const suffix = opts.lowercase ? unit.toLowerCase() : unit; // Add a space between number and abbreviation.\n\n  const space = opts.space ? \" \" : \"\"; // Replace decimal mark if desired.\n\n  const formatted = rounded.toString().replace(options_1.defaultOptions.decimalSeparator, opts.decimalSeparator);\n  return `${prefix}${formatted}${space}${suffix}`;\n}\n\nexports.millify = millify;\nexports.default = millify;","map":null,"metadata":{},"sourceType":"script"}